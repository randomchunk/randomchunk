#!/bin/bash

# extract a piece from a file
# released under the terms of the GPL
# https://www.gnu.org/licenses/gpl-3.0.txt

OPTIND=""
infile=""
outfile=""
size=""
minsize=0
maxsize=""
randomsize=0
append=""
VERBOSE=0

function usage
{
	echo "randomchunk -- extract a random chunk from a large file"
	echo "usage: randomchunk -i infile -o outfile -s size -p SEED" 
	echo "	-i infile	file to read chunk from"
	echo "	-o outfile	file to write chunk to"
	echo "	-s size		size (in kilobytes) of output"
	echo "	-p seed		seed for the PRNG"
	echo "	-r		make a random size chunk"
	echo "	-n		minimum size for -r (in KB)"
	echo "	-x		maximum size for -r (in KB)"
	echo "	-a		append to ouput file rather than overwriting"
	echo "	-q		if file is not large enough, just copy entire file"
	#echo "	-v		be verbose"
	echo ""
  	exit 1
}


function errquit 
{
	if [[ $VERBOSE == 1 ]]
	then
		echo $@
	else
		echo "Error"
	fi
	exit 1
}

function info
{
	if [[ $VERBOSE == 1 ]]
	then
		echo $@
	fi
}

# use getopts to collect parameters
while getopts "i:o:s:n:x:p:raq" OPTION
do
  case $OPTION in
	i)
	  infile="$OPTARG"

	  info "Input file is: '$infile'"
	  ;;
	o)
	  outfile="$OPTARG"
	  info "Output file is: '$outfile'"
	  ;;
	s)
		size="$OPTARG"
	  ;;
	n)
		minsize="$OPTARG"
	  ;;
	x)
		maxsize="$OPTARG"
	  ;;
	r)
	  randomsize=1
	  info "A random-sized subset of the file will be chosen."
	  ;;
	a)
	  append="conv=notrunc oflag=append"
	  # will append instead of overwrite
	  ;;
	q)
	  ok_if_short=1
	  # just copy entire file if it is not large enough
	  ;;
	p)
	  #seeding with non-numeric values always yields 20034 
	  seed="$OPTARG"
		;;
	#v)
		# enable verbose mode
		#VERBOSE=1
	#	;;
  esac
done

# checks

# does seed exist?
if [ -z $seed ] ; then
	usage
fi

# is it a number?
if [ "$seed" -eq "$seed" ] 2>/dev/null
then
	info "Seed is $seed."
	RANDOM="$seed"
else
  errquit "Seed $seed is not a number."
fi

if [ -z "$infile" ] || [ -z $outfile ]
then
	usage
fi

# check to see that infile exists and is readable
if [ -f "$infile" ]
then
	if [ ! -r "$infile" ]
	then
		errquit "Infile '$infile' exists but is not readable." 
	fi
else
	errquit "Infile '$infile' does not exist." 
fi

# get file size
infilesize=$(( $(stat -c%s "$infile") / 1024 ))

if [ -z $size ] && ! [ $randomsize == 1 ]
then
  #errquit "No size specified (must specify -s or -r)"
  usage
fi

if [[ $randomsize == 1 ]]
then

	# make sure minsize is a number
	if [ "$minsize" -eq "$minsize" ] 2>/dev/null
	then
		info "Min chunk size is: '$minsize'"
	else
		errquit "Min chunk size $minsize is not a number."
	fi

	# make sure maxsize is a number
	if [ "$maxsize" -eq "$maxsize" ] 2>/dev/null
	then
		info "Max chunk size is: '$maxsize'"
	else
	  errquit "Max chunk size $maxsize is not a number."
	fi
else
	# make sure size is a number
	if [ "$size" -eq "$size" ] 2>/dev/null
	then
		info "Chunk size is: '$size'"
	else
		errquit "Size $size is not a number."
	fi
fi


if [ ! -z $size ]
then
	if (( $size < 0 ))
	then
	  errquit "Size cannot be negative. ($size)"
	elif (( $size > $infilesize ))
	then
		if [[ $ok_if_short == 1 ]]
		then
			info "File is too small for this size so we will copy the whole thing. (-q)"
			cp -v "$infile" $outfile
			exit 0
		fi
	  errquit "Size ${size}K requested, but '$infile' is only ${infilesize}K bytes, aborting." 

	elif (( $minsize > 0 )) || [ ! -z $maxsize ] || [[ $randomsize == 1 ]]
	then
  		info "WARNING: explicit size argument (${size}K) OVERRIDES random/min/max settings."
	fi
fi

if [ ! -z $maxsize ]
then
	if (( $maxsize > $infilesize ))
	then
		if [[ $ok_if_short == 1 ]]
		then
			info "WARNING: Max size is larger than file size. May end up copying the entire file(-q)"
    else
	  errquit "Maxsize ${maxsize}K is greater than ${infilesize}K, aborting." 
    fi
	elif (( $minsize > $maxsize ))
	then
	  errquit "Minsize (${minsize}K) cannot be larger than maxsize (${maxsize}K), aborting." 
	fi
else
  maxsize=$infilesize
fi

if (( $minsize > $infilesize )) 
then
	if [[ $ok_if_short == 1 ]]
	then
    info "Minimum size is greater than file size, so we copy the entire thing (-q)"
		cp -v "$infile" $outfile
		exit 0
  else
    errquit "Minimum size is greater than file size. This should never run because either minsize > maxsize or maxsize > infile size"
  fi
fi

if (( $minsize < 0 ))
then
  errquit "Minsize (${minsize}K) cannot be negative, aborting." 
fi

if [[ $randomsize == 1 ]] && [ -z $size ]
then
  size=$(( RANDOM % infilesize ))
  	while (( $size < $minsize )) || (( $size > $maxsize ))
  	do
		size=$(( RANDOM % infilesize ))
	done
  	
	info "Random size: ${size}K"
fi

skip=$(( RANDOM % ( infilesize - size ) ))
info "Skipping $skip KB out of $infilesize and reading $size KB to $outfile"
if dd if="$infile" of="$outfile" bs=1024 count=$size skip=$skip $append 2> /dev/null
then
	hash=$(sha256sum $outfile | cut -d " " -f 1)
	echo "$infile,$outfile,$size,$skip,$hash" >> rchunk.log
else
	echo "$infile,$outfile,$size,$skip,ERROR" >> rchunk.log
fi
