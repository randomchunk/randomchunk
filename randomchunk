#!/bin/bash

# extract a piece from a file

OPTIND=""
infile=""
outfile=""
size=""
minsize=0
maxsize=""
randomsize=0
append=""

# use getopts to collect parameters
while getopts "i:o:s:n:x:p:raq" OPTION
do
  case $OPTION in
	i)
	  infile="$OPTARG"
	  echo "Input file is: '$infile'"
	  ;;
	o)
	  outfile=$OPTARG
	  echo "Output file is: '$outfile'"
	  ;;
	s)
		size=$((OPTARG))
	  echo "Chunk size is: '$size'"
	  ;;
	n)
		minsize=$((OPTARG))
	  echo "Min chunk size is: '$minsize'"
	  ;;
	x)
		maxsize=$((OPTARG))
	  echo "Max chunk size is: '$maxsize'"
	  ;;
	r)
	  randomsize=1
	  echo "A random-sized subset of the file will be chosen."
	  ;;
	a)
	  append="conv=notrunc oflag=append"
	  # will append instead of overwrite
	  ;;
	q)
	  ok_if_short=1
	  # just copy entire file if it is not large enough
	  ;;
	p)
	    #seeding with non-numeric values always yields 20034 
	    seed="$OPTARG"
	    RANDOM="$seed"
  esac
done

if [ -z "$infile" ] || [ -z $outfile ]
then
	echo "randomchunk -- extract a random chunk from a large file"
	echo "usage: randomchunk -i infile -o outfile -s size"
	echo "	-i infile	file to read chunk from"
	echo "	-o outfile	file to write chunk to"
	echo "	-s size		size (in kilobytes) of output"
	echo "	-p seed		seed for the PRNG"
	echo "	-r		make a random size chunk"
	echo "	-n		minimum size for -r (in KB)"
	echo "	-x		maximum size for -r (in KB)"
	echo "	-a		append to ouput file rather than overwriting"
	echo "	-q		if file is not large enough, just copy entire file"
	echo ""
  exit 1
fi

# get file size
infilesize=$(( $(stat -c%s "$infile") / 1024 ))

if [ ! -z $size ]
then
	if (( $size < 0 ))
	then
	  echo "Size cannot be negative. ($size)"
	elif (( $size > $infilesize ))
	then
		if [[ $ok_if_short == 1 ]]
		then
			echo "File is too small for this size so we will copy the whole thing. (-q)"
			cp -v "$infile" $outfile
			exit 0
		fi
	  echo "Size ${size}K requested, but '$infile' is only ${infilesize}K bytes, aborting." 1>&2
	  exit 1
	elif (( $minsize > 0 )) || [ ! -z $maxsize ] || [[ $randomsize == 1 ]]
	then
  		echo "WARNING: explicit size argument (${size}K) OVERRIDES random/min/max settings."
	fi
fi

if [ ! -z $maxsize ]
then
	if (( $maxsize > $infilesize ))
	then
	  echo "Maxsize ${maxsize}K is greater than ${infilesize}K, aborting." 1>&2
	  exit 1
	elif (( $minsize > $maxsize ))
	then
	  echo "Minsize (${minsize}K) cannot be larger than maxsize (${maxsize}K), aborting." 1>&2
	  exit 1
	fi
else
  maxsize=$infilesize
fi

if (( $minsize < 0 ))
then
  echo "Minsize (${minsize}K) cannot be negative, aborting." 1>&2
  exit 1
fi

if [ -f "$infile" ]
then
	if [ ! -r "$infile" ]
	then
	  echo "Infile '$infile' exists but is not readable." 1>&2
	  exit 1
	fi
  else
	  echo "Infile '$infile' does not exist." 1>&2
	  exit 1
fi

if [[ $randomsize == 1 ]]
then
	size=0
  	while (( $size < $minsize )) || (( $size > $maxsize ))
  	do
		size=$(( RANDOM % infilesize ))
	done
  	
	echo "Random size: ${size}K"
fi

skip=$(( RANDOM % ( infilesize - size ) ))
echo "Skipping $skip KB out of $infilesize and reading $size KB to $outfile"
if dd if="$infile" of=$outfile bs=1024 count=$size skip=$skip $append 2>&1
then
	hash=$(sha256sum $outfile | cut -d " " -f 1)
	echo "$infile,$outfile,$size,$skip,$hash" >> rchunk.log
else
	echo "$infile,$outfile,$size,$skip,ERROR" >> rchunk.log
fi
